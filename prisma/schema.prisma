// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OTPTYPE {
  SIGNUP_VERIFICATION
  RESET_PASSWORD
}

enum USERROLE {
  ATHELETE
  COACH
}

enum genderEnum {
  FEMALE
  MALE
}

model User {
  id                Int           @id @default(autoincrement())
  role              USERROLE
  email             String        @unique
  password          String
  profileImage      String?
  about             String?
  isVerified        Boolean       @default(false)
  isProfileComplete Boolean       @default(false)
  user_details      User_Details? @relation("UserToDetails")

  userSports          UserSports[]
  achievment          achievment[]       @relation("UserAchievment")
  certificate         CertificateImage[] @relation("CertificateImage")
  coaching_experience Int?
  likeRecieved        feedLike[]         @relation("LikesRecieved")
  likeGiven           feedLike[]         @relation("LikesGiven")

  media media[]

  notification Notifications[]
  devices      Devices[]
}

model CertificateImage {
  id     Int    @id @default(autoincrement())
  userId Int
  urls   String
  user   User   @relation(fields: [userId], references: [id], name: "CertificateImage")
}

model achievment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(references: [id], fields: [userId], name: "UserAchievment")
  name      String?
  year      Int?
  createdAt DateTime @default(now())
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      Int      @unique
  email     String
  otp_type  OTPTYPE  @default(SIGNUP_VERIFICATION)
  expireAt  DateTime
  createdAt DateTime @default(now())
}

model User_Details {
  userId       Int        @id
  user         User       @relation(fields: [userId], references: [id], name: "UserToDetails")
  first_name   String
  last_name    String
  DOB          DateTime   @db.Date
  gender       genderEnum
  height       Height?    @relation("UserHeight")
  address      String
  city         String
  state        String
  phone        String
  emailAddress String
  education    Education? @relation("Educations")

  currentTeam String?

  coachName String?
}

model Height {
  id           Int          @id @default(autoincrement())
  ft           Decimal      @db.Decimal(3, 2)
  inches       Decimal      @db.Decimal(3, 2)
  weight       Decimal      @db.Decimal(3, 2)
  userDetailId Int          @unique
  user_detail  User_Details @relation(references: [userId], fields: [userDetailId], name: "UserHeight")
}

model Education {
  id             Int           @id @default(autoincrement())
  school_name    String
  GPA            Decimal       @db.Decimal(3, 3)
  graduated_year DateTime      @db.Date
  userDetailId   Int           @unique
  user_detail    User_Details? @relation(fields: [userDetailId], references: [userId], name: "Educations")
}

model Sport {
  id   Int    @id @default(autoincrement())
  name String

  userSports UserSports[]
}

model UserSports {
  id       Int     @id @default(autoincrement())
  sportId  Int?
  userId   Int?
  position String?
  user     User?   @relation(fields: [userId], references: [id])
  sport    Sport?  @relation(fields: [sportId], references: [id])
}

model feedLike {
  id          Int  @id @default(autoincrement())
  likedUserId Int
  likedById   Int
  likeUser    User @relation(references: [id], fields: [likedUserId], name: "LikesRecieved")
  likeBy      User @relation(references: [id], fields: [likedById], name: "LikesGiven")
}

model media {
  id        Int          @id @default(autoincrement())
  userId    Int?
  User      User?        @relation(fields: [userId], references: [id])
  urls      String
  type      FILETYPEENUM
  createdAt DateTime     @default(now())
}

enum FILETYPEENUM {
  IMAGE
  VIDEO
}

model Devices {
  id           Int    @id @default(autoincrement())
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
  fcmToken     String
  access_token String
}

model Notifications {
  id      Int              @id @default(autoincrement())
  userId  Int
  user    User             @relation(fields: [userId], references: [id])
  title   String
  message String
  meta    Json?
  type    NotificationType @default(GENERAL)

  createdAt DateTime @default(now())
}

enum NotificationType {
  GENERAL
  LIKE
}
